给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 补码运算 方法。

答案字符串中的所有字母都应该是小写字符，并且除了 0 本身之外，答案中不应该有任何前置零。

注意: 不允许使用任何由库提供的将数字直接转换或格式化为十六进制的方法来解决这个问题。

纯c：
char* toHex(int num) {
    if(!num) return "0";
    char* s = (char*)malloc(sizeof(char) * 9);          // 不要忽略'\0'
    int i = 7;
    while(i >= 0){
        int x = num & 0xF;                              // 与运算取num二进制最后四位
        s[i--] = (x >= 10) ? (x - 10 +'a') : (x + '0'); // 赋值
        num = num >> 4;                                 // num二进制右移四位
    }
    s[8] = '\0';                                        // 结束字符
    i = 0;
    while(s[i] == '0'){                                 // 去掉前缀0
        i++;
    } 
    return &s[i];
}
为什么要这样呢，因为要返回的结果不能以0开头。
